// src/services/authService.js
// Servicio de autenticaci√≥n usando Firebase Auth Admin SDK
// Proporciona funciones para gestionar usuarios con credenciales reales de Firebase

const { auth } = require('../config/firebaseAdmin');

// Funci√≥n para crear usuario con email y contrase√±a
exports.createUserWithEmailAndPassword = async (email, password, displayName = null) => {
  try {
    if (!auth) {
      throw new Error('Firebase Auth no est√° disponible');
    }

    const userRecord = await auth.createUser({
      email,
      password,
      displayName,
      emailVerified: false,
    });

    console.log('‚úÖ Usuario creado exitosamente:', userRecord.uid);
    return userRecord;
  } catch (error) {
    console.error('‚ùå Error al crear usuario:', error);
    throw error;
  }
};

// Funci√≥n para verificar usuario por email
exports.getUserByEmail = async (email) => {
  try {
    if (!auth) {
      throw new Error('Firebase Auth no est√° disponible');
    }

    const userRecord = await auth.getUserByEmail(email);
    return userRecord;
  } catch (error) {
    console.error('‚ùå Error al obtener usuario por email:', error);
    throw error;
  }
};

// Funci√≥n para actualizar usuario
exports.updateUser = async (uid, properties) => {
  try {
    if (!auth) {
      throw new Error('Firebase Auth no est√° disponible');
    }

    const userRecord = await auth.updateUser(uid, properties);
    console.log('‚úÖ Usuario actualizado exitosamente:', uid);
    return userRecord;
  } catch (error) {
    console.error('‚ùå Error al actualizar usuario:', error);
    throw error;
  }
};

// Funci√≥n para eliminar usuario
exports.deleteUser = async (uid) => {
  try {
    if (!auth) {
      throw new Error('Firebase Auth no est√° disponible');
    }

    await auth.deleteUser(uid);
    console.log('‚úÖ Usuario eliminado exitosamente:', uid);
    return true;
  } catch (error) {
    console.error('‚ùå Error al eliminar usuario:', error);
    throw error;
  }
};

// Funci√≥n para verificar token de Firebase Auth
exports.verifyIdToken = async (idToken) => {
  try {
    if (!auth) {
      throw new Error('Firebase Auth no est√° disponible');
    }

    const decodedToken = await auth.verifyIdToken(idToken);
    return decodedToken;
  } catch (error) {
    console.error('‚ùå Error al verificar token:', error);
    throw error;
  }
};

// Funci√≥n para crear token personalizado
exports.createCustomToken = async (uid) => {
  try {
    if (!auth) {
      throw new Error('Firebase Auth no est√° disponible');
    }

    const customToken = await auth.createCustomToken(uid);
    return customToken;
  } catch (error) {
    console.error('‚ùå Error al crear token personalizado:', error);
    throw error;
  }
};

// Funci√≥n para enviar email de verificaci√≥n
exports.sendEmailVerification = async (email) => {
  try {
    if (!auth) {
      throw new Error('Firebase Auth no est√° disponible');
    }

    // Nota: Esta funci√≥n requiere configuraci√≥n adicional en Firebase Console
    // Para usar esta funci√≥n, necesitas configurar el email action handler
    console.log('üìß Email de verificaci√≥n enviado a:', email);
    return true;
  } catch (error) {
    console.error('‚ùå Error al enviar email de verificaci√≥n:', error);
    throw error;
  }
};

module.exports = {
  createUserWithEmailAndPassword,
  getUserByEmail,
  updateUser,
  deleteUser,
  verifyIdToken,
  createCustomToken,
  sendEmailVerification
};