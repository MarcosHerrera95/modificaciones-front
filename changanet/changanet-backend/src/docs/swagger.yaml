# src/docs/swagger.yaml
openapi: 3.0.0
info:
  title: Changánet API
  version: 1.0.0
  description: API para la plataforma Changánet - Plataforma de Servicios Profesionales con Triple Impacto
servers:
  - url: http://localhost:3002/api
    description: Servidor de desarrollo
  - url: https://api.changanet.com/v1
    description: Servidor de producción
paths:
  /auth/register:
    post:
      summary: Registrar un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
                role:
                  type: string
                  enum: [cliente, profesional]
      responses:
        '201':
          description: Usuario creado. Se envía email de verificación.
        '400':
          description: Error de validación (email ya existe, datos inválidos).

  /auth/login:
    post:
      summary: Iniciar sesión de usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login exitoso. Devuelve token JWT y datos del usuario.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      email:
                        type: string
                      name:
                        type: string
                      role:
                        type: string
        '401':
          description: Credenciales inválidas.
        '403':
          description: Usuario no verificado.

  /profile/{professionalId}:
    get:
      summary: Obtener perfil público de un profesional
      parameters:
        - name: professionalId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Perfil del profesional.
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuario_id:
                    type: string
                  especialidad:
                    type: string
                  calificación_promedio:
                    type: number
                  url_foto_perfil:
                    type: string
        '404':
          description: Perfil no encontrado.

  /professionals:
    get:
      summary: Buscar profesionales con filtros
      parameters:
        - name: specialty
          in: query
          schema:
            type: string
        - name: location
          in: query
          schema:
            type: string
        - name: minPrice
          in: query
          schema:
            type: number
        - name: maxPrice
          in: query
          schema:
            type: number
      responses:
        '200':
          description: Lista de profesionales filtrados.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professional'

components:
  schemas:
    Professional:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        specialty:
          type: string
        rating:
          type: number
        distance:
          type: number
        price:
          type: number
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []